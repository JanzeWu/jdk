MySQL InnoDB存储的文件结构
索引树是如何维护的？
数据库自增主键可能的问题

Redis的主键争用问题如何解决
了解Redis事务的CAS操作吗

分析线程池的实现原理和线程的调度过程

动态代理的几种方式
Spring AOP与IOC的实现
为什么CGlib方式可以对接口实现代理？

RMI与代理模式
Dubbo的底层实现原理和机制，
描述一个服务从发布到被消费的详细过程

算法方面考察了一个简单的数组就地去重问题，用丢弃数组尾部元素的方式实现了。




分布式系统怎么做服务治理

接口的幂等性的概念
Maven出现版本冲突如何解决
JVM垃圾回收机制，何时触发MinorGC等操作
新生代和老生代的内存回收策略
Eden和Survivor的比例分配等
Synchronized和Lock的区别



JVM内存分代，
Java 8的内存分代改进
深入分析了Classloader，双亲委派机制

JVM的编译优化
对Java内存模型的理解，以及其在并发中的应用
指令重排序，内存栅栏等

HashMap的并发问题
了解LinkedHashMap的应用吗
在工作中遇到过哪些设计模式，是如何应用的



消息中间件如何解决消息丢失问题
Dubbo的服务请求失败怎么处理
重连机制会不会造成错误
对分布式事务的理解
深入分析几个设计模式

面试最后提问了一个不定长字符串转为定长字符串的问题，
刚刚面过优酷，这个简单的问题被我想复杂了，没有Get到面试官的点，考虑了唯一性，性能等，扯了一大堆



TCP/IP协议
长连接与短连接
mapreduce过程
多路归并的时间复杂度
海量url去重类问题
Java NIO使用
倒排索引的原理
对分词技术的了解

面试中给了一个具体场景，考察对MapReduce过程的理解，比如Map阶段和Reduce阶段是如何进行的等，

Reduce阶段面试官希望分析给出一个多路归并的时间复杂度，用外排序的知识简单分析了一下，回答的不太好。。




HTTP请求的报文格式
Spring的事务实现原理

实际场景问题，大量用户数据如何在内存中排序和去重
缓存机器增删如何对系统影响最小，一致性哈希的实现
Redis持久化的几种方式
Redis的缓存失效策略
实际场景问题解决，典型的TOP K问题

实际场景问题，海量登录日志如何排序和处理
SQL操作，主要是索引和聚合函数的应用



SQL语句编写
MySQL的几种优化
Spring行级锁
Spring衍生的相关其他组件整理
RMI的几种协议和实现框架
BTree相关的操作
数据库锁表的相关处理
考察跳台阶问题

和面试官的交流比较轻松，面试官提示我要加强数据库操作的掌握，另外面试过程中询问了一些工作中用到框架和组件的版本等细节问题，平时没太关



JVM内存查看与分析，编写内存泄露实例
线上CPU100%，如何定位和排查问题
如何在运行时确定对象类型？
引用传递和值传递
类加载过程，如何获得当前对象的ClassLoader
Git操作，Maven多项目聚合
10万个ip段如何快速查找

Java内存模型，volatile和i++的线程安全
线程池实现原理，Lock机制的实现
JVM对final关键字的编译优化
ConcurrentHashMap深入分析
HashMap和HashSet的使用
Synchronized和Lock的使用

Dubbo底层实现，Dubbo相比webservice等方式的优势
设计模式，服务治理等

Spring动态加载数据源
Spring boot应用
Spring中的设计模式

Linux的常用命令，简单shell编写
Linux系统监控命令

Redis的持久化方式
缓存和数据库的一致性问题
Redis、MongoDB和Memcached的区别

Solr和Lucene，中文分词技术
爬虫的深搜和广搜，队列和栈

数据库索引的实现，B+树的结构和操作，为什么不用红黑树
SQL表设计 Join操作
数据库范式，聚集索引与非聚集索引
数据库存储过程，SQL注入




1.基础知识必须要扎实，包括语言基础，计算机基础，算法和基本的Linux运维等
针对Java语言，需要对集合类，并发包，IO/NIO，JVM，内存模型，泛型，异常，反射等都有比较深入的了解，最好是学习过部分源码。

这些知识点都是相通的，在面试中也可以体现，比如集合类的HashMap，

从源码的角度，可以深入到哈希表的实现，拉链法以外的哈希碰撞解决方法，如何平衡内部数组保证哈希表的性能不会下降等；
从线程安全的角度可以扩展到HashTable、ConcurrentHashMap等其他的数据结构，可以比较两种不同的加锁方式，RetreenLock的实现和应用，
继续深入可以考察Java内存模型，Volitale原语，内存栅栏等；
横向扩展可以考察有序的Map结构如TreeMap、LinkedHashMap，继而考察红黑树，LRU缓存，HashMap的排序等知识。

Java方向的中高级职位，会比较重视对虚拟机的掌握，诸如类加载机制，内存模型等，这些在程序的优化和并发编程中都非常重要。

算法方面，基本的排序和查找算法，对递归，分治等思想的掌握。如果算法基础不太好，推荐《编程珠玑》等，每一章都很经典。

另外计算机基础，比如TCP/IP协议和操作系统的知识也是必备的，这些都是大学计算机专业的基础课，也是做开发基本的素养。

2.设计模式，造轮子的能力，各种缓存和数据库应用，缓存，中间件技术，高并发和高可用的分布式系统设计
大型互联网公司每天要面对海量的请求，都会考察分布式系统的架构和设计，如何构建高并发高可用的系统，

另外因为用户基数比较大，一个细微的优化可能会给带来很大的收益，所以对一些技术栈的掌握要求都比较深入。

比如对MySQL数据库，需要知道相关的配置和优化，业务上来以后如何分库分表，如何合理的配置缓存，一个经验丰富的服务端开发人员，也应该是一个称职的DBA。

对常用的开发组件，比如中间件，RPC框架等都要有一定的了解，虽然工作中可能用不到我们自己造轮子，但是掌握原理才会得心应手。

这部分知识主要靠工作积累，推荐《大型网站技术架构与Java中间件实践》，还有曾贤杰的《大型网站系统架构与实践》，

里面对大型网站的演变，服务治理和中间件的使用做了很详细的阐述。

作为业务开发人员，有必要了解压力测试相关的指标，比如QPS，用户平均等待时间等，可以帮助你更好的了解自己的系统。

3.软性指标，包括快速学习，良好的沟通能力，以及对相关行业的了解
公司招聘会比较看重一个人的学习能力，是不是值得培养，很多公司校招的毕业生薪资会倒挂工作多年的老员工，也是这样。

像沟通习惯，逻辑分析能力，这些都属于软实力，短时间内很难提高，需要长期的养成和持续不断的投入。

好多公司还会看重所在行业，虽然是做业务，但是对产品和行业的了解也很重要。

比如互联网金融类公司的岗位，如果有过支付和银行相关的系统开发经验肯定会有加分，这点和每个人的长期规划有关。
